# -*- coding: utf-8 -*-
"""Project01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wnZmYQ_P2Z6WsB6Y0nWdc-GYK60cEdjh
"""

# ALL 04 BUSES LIST

import pandas as pd
import zipfile
import os
!pip install XlsxWriter
from google.colab import files

# Upload Excel file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Read Excel data from row 2 (i.e., skip header row 0)
df = pd.read_excel(filename, header=1)

# Required columns
required_columns = ['S.No', 'Code', 'नाम ', 'House ID', 'Zone No.', 'जाने आने का साधन', 'जाने  का Coach No./   Bus No.']
missing_cols = [col for col in required_columns if col not in df.columns]

if missing_cols:
    print(f"Missing columns: {missing_cols}")
    print("Available columns are:")
    print(df.columns.tolist())
else:
    output_files = []
    for i in range(1, 5):  # For buses 1 to 4
        # Filter for bus i
        bus_df = df[
            (df['जाने आने का साधन'] == 'बस द्वारा') &
            (df['जाने  का Coach No./   Bus No.'] == i)
        ][['S.No', 'Code', 'नाम ', 'House ID', 'Zone No.']]

        # ✅ Set S.No to be sequential
        bus_df['S.No'] = range(1, len(bus_df) + 1)

        # Ensure correct types
        bus_df['Zone No.'] = bus_df['Zone No.'].astype(str)
        bus_df['House ID'] = bus_df['House ID'].astype(str)

        # Create pivot table
        matrix = pd.pivot_table(bus_df, index='Zone No.', columns='House ID', aggfunc='size', fill_value=0)

        # Add TOTAL row and column
        matrix['TOTAL'] = matrix.sum(axis=1)
        total_row = matrix.sum(axis=0)
        total_row.name = 'TOTAL'
        matrix = pd.concat([matrix, total_row.to_frame().T])

        # Replace 0 with empty string
        matrix = matrix.replace(0, '')
        matrix.columns.name = 'House ID / Zone No.'

        # Create Excel file
        output_filename = f'बस_{i:02}_द्वारा_filtered.xlsx'
        with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
            # Write filtered data
            bus_df.to_excel(writer, sheet_name='Data', index=False, startrow=1)
            worksheet = writer.sheets['Data']
            worksheet.write('A1', f'BUS NO. = {i}')
            start_row = len(bus_df) + 4

            matrix.index.name = 'House No. / Zone No.'
            matrix.to_excel(writer, sheet_name='Data', startrow=start_row)

            # Formatting
            center_format = writer.book.add_format({'align': 'center', 'valign': 'vcenter'})
            worksheet.set_column('A:A', 10, center_format)
            worksheet.set_column('B:B', 10, center_format)
            worksheet.set_column('C:C', 25, center_format)
            worksheet.set_column('D:D', 10, center_format)
            worksheet.set_column('E:E', 10, center_format)

            for idx, col in enumerate(matrix.columns, 1):
                worksheet.set_column(idx, idx, 15, center_format)

        output_files.append(output_filename)

    # Create ZIP file
    zip_filename = "All_Bus_Files.zip"
    with zipfile.ZipFile(zip_filename, "w") as zipf:
        for file in output_files:
            zipf.write(file)

    # Download the ZIP file
    files.download(zip_filename)

# TRAIN LIST

import pandas as pd
import zipfile
import os
!pip install XlsxWriter
from google.colab import files

# Step 1: Upload Excel file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Step 2: Read Excel data from second row (header=1)
df = pd.read_excel(filename, header=1)

# Step 3: Define required columns (as they appear in Excel)
required_columns = ['S.No', 'Code', 'नाम ', 'House ID', 'Zone No.',
                    'जाने  का Coach No./   Bus No.', 'जाने  का  Seat No.', 'आने   का Coach no.', 'आने   का Seat No.']

# Check if any required column is missing
missing_cols = [col for col in required_columns if col not in df.columns]

if missing_cols:
    print(f"❌ Missing columns: {missing_cols}")
    print("✅ Available columns are:")
    print(df.columns.tolist())
else:
    # ✅ Fix: Strip spaces when filtering
    train_df = df[df['जाने आने का साधन'].astype(str).str.strip() == 'रेल द्वारा'][required_columns]

    # Step 4: Rename columns for output clarity
    train_df.columns = ['S.No', 'Code', 'नाम', 'House ID', 'Zone No.',
                        'जाने का Coach no.', 'जाने का Seat no.', 'आने का Coach no.', 'आने का Seat no.']
    train_df['S.No'] = range(1, len(train_df) + 1)
    # Ensure correct data types
    train_df['House ID'] = train_df['House ID'].astype(str)
    train_df['Zone No.'] = train_df['Zone No.'].astype(str)

    # Step 5: Create pivot table
    matrix = pd.pivot_table(train_df, index='Zone No.', columns='House ID', aggfunc='size', fill_value=0)
    matrix['TOTAL'] = matrix.sum(axis=1)
    total_row = matrix.sum(axis=0)
    total_row.name = 'TOTAL'
    matrix = pd.concat([matrix, total_row.to_frame().T])
    matrix = matrix.replace(0, '')
    matrix.columns.name = 'House ID / Zone No.'

    # Step 6: Save to Excel
    output_filename = 'Train_Dwara_Data.xlsx'
    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        train_df.to_excel(writer, sheet_name='Data', index=False, startrow=1)
        worksheet = writer.sheets['Data']
        worksheet.write('A1', 'Train Data - रेल द्वारा')

        start_row = len(train_df) + 4
        matrix.index.name = 'House No. / Zone No.'
        matrix.to_excel(writer, sheet_name='Data', startrow=start_row)


        center_format = writer.book.add_format({'align': 'center', 'valign': 'vcenter'})
        worksheet.set_column('A:A', 8, center_format)
        worksheet.set_column('B:B', 10, center_format)
        worksheet.set_column('C:C', 25, center_format)
        worksheet.set_column('D:D', 10, center_format)
        worksheet.set_column('E:E', 10, center_format)
        worksheet.set_column('F:F', 18, center_format)
        worksheet.set_column('G:I', 15, center_format)
        worksheet.set_column('J:J', 15, center_format)

    # Step 7: Zip the file
    zip_filename = 'TrainData.zip'
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        zipf.write(output_filename)

    # Step 8: Download
    files.download(zip_filename)

# SELF LIST - अपने साधन से

import pandas as pd
import zipfile
import os
!pip install XlsxWriter
from google.colab import files

# Step 1: Upload Excel file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Step 2: Read Excel data from second row (header=1)
df = pd.read_excel(filename, header=1)

# Step 3: Define required columns
required_columns = ['S.No', 'Code', 'नाम ', 'House ID', 'Zone No.']

# Check for missing columns
missing_cols = [col for col in required_columns if col not in df.columns]
if missing_cols:
    print(f"❌ Missing columns: {missing_cols}")
    print("✅ Available columns are:")
    print(df.columns.tolist())
else:
    # ✅ Filter for 'अपने साधन से'
    df['जाने आने का साधन'] = df['जाने आने का साधन'].astype(str).str.strip()
    self_df = df[df['जाने आने का साधन'] == 'अपने साधन से'][required_columns].copy()

    # Step 4: Rename columns for output clarity
    self_df.columns = ['S.No', 'Code', 'नाम', 'House ID', 'Zone No.']
    self_df['S.No'] = range(1, len(self_df) + 1)
    self_df['Mode Of Transportation'] = ''


    # Ensure consistent data types
    # self_df['House ID'] = self_df['House ID'].astype(str)
    self_df['House ID'] = self_df['House ID'].astype(str).str.strip()
    # Remove rows with invalid house ids like 0, '0', empty strings or NaN
    self_df = self_df[~self_df['House ID'].isin(['', '0', 'nan', 'NaN'])]

    self_df['Zone No.'] = self_df['Zone No.'].astype(str).str.strip()
    self_df = self_df[~self_df['Zone No.'].isin(['', '0', 'nan', 'NaN'])]

    # Step 5: Create pivot table
    matrix = pd.pivot_table(self_df, index='Zone No.', columns='House ID', aggfunc='size', fill_value=0)
    matrix['TOTAL'] = matrix.sum(axis=1)
    total_row = matrix.sum(axis=0)
    total_row.name = 'TOTAL'
    matrix = pd.concat([matrix, total_row.to_frame().T])
    matrix = matrix.replace(0, '')
    matrix.columns.name = 'House ID / Zone No.'

    # Step 6: Save to Excel
    output_filename = 'Apne_Saadhan_Se_Data.xlsx'
    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        self_df.to_excel(writer, sheet_name='Data', index=False, startrow=1)
        worksheet = writer.sheets['Data']
        worksheet.write('A1', 'Self Transport Data - अपने साधन से')

        start_row = len(self_df) + 4
        matrix.index.name = 'House ID/Zone No.'
        matrix.to_excel(writer, sheet_name='Data', startrow=start_row)

        # Column formatting
        center_format = writer.book.add_format({'align': 'center', 'valign': 'vcenter'})
        worksheet.set_column('A:A', 8, center_format)
        worksheet.set_column('B:B', 10, center_format)
        worksheet.set_column('C:C', 25, center_format)
        worksheet.set_column('D:D', 10, center_format)
        worksheet.set_column('E:E', 10, center_format)

    # Step 7: Zip the file
    zip_filename = 'ApneSaadhanSeData.zip'
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        zipf.write(output_filename)

    # Step 8: Download ZIP
    files.download(zip_filename)

# TRANSPORTATION WISE SUMMARIES

import pandas as pd
import zipfile
from google.colab import files

# Upload Excel
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Read and clean data
df = pd.read_excel(filename, header=1)
df.columns = df.columns.str.strip().str.replace(r'\s+', ' ', regex=True)
df['जाने आने का साधन'] = df['जाने आने का साधन'].astype(str).str.strip()
df['Zone No.'] = df['Zone No.'].astype(str)
df['House ID'] = df['House ID'].astype(str)

# Transport types and their filters
transport_blocks = [
    ('BUS NO. 1', 'बस द्वारा', 1),
    ('BUS NO. 2', 'बस द्वारा', 2),
    ('BUS NO. 3', 'बस द्वारा', 3),
    ('BUS NO. 4', 'बस द्वारा', 4),
    ('TRAIN', 'रेल द्वारा', None),
    ('OWN CONVEYANCE', 'अपने साधन से', None)
]

# Create Excel file
output_filename = 'Combined_Transport_Summary.xlsx'
with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
    worksheet_name = 'Transport Summary'
    workbook = writer.book
    worksheet = workbook.add_worksheet(worksheet_name)
    writer.sheets[worksheet_name] = worksheet

    border_fmt = workbook.add_format({'border': 1, 'align': 'center', 'valign': 'vcenter'})
    bold_fmt = workbook.add_format({'bold': True, 'align': 'center'})

    start_row = 0

    for title, mode, bus_no in transport_blocks:
        # Filter data
        if mode == 'बस द्वारा':
            temp_df = df[(df['जाने आने का साधन'] == mode) & (df['जाने का Coach No./ Bus No.'] == bus_no)]
        else:
            temp_df = df[df['जाने आने का साधन'] == mode]

        # Create pivot
        matrix = pd.pivot_table(temp_df, index='Zone No.', columns='House ID', aggfunc='size', fill_value=0)
        matrix['TOTAL'] = matrix.sum(axis=1)
        total_row = matrix.sum(axis=0)
        total_row.name = 'TOTAL'
        matrix = pd.concat([matrix, total_row.to_frame().T])
        matrix = matrix.replace(0, '')
        matrix.index.name = 'Z. No.'
        matrix.columns.name = 'H. Id'

        # Write title
        worksheet.write(start_row, 0, title, bold_fmt)
        start_row += 1

        # Write column headers
        worksheet.write(start_row, 0, "Z. id. / H. No", bold_fmt)
        for col_idx, col in enumerate(matrix.columns):
            worksheet.write(start_row, col_idx + 1, col, bold_fmt)

        # Write data
        for row_idx, (zno, row) in enumerate(matrix.iterrows()):
            worksheet.write(start_row + 1 + row_idx, 0, zno, border_fmt)
            for col_idx, val in enumerate(row):
                worksheet.write(start_row + 1 + row_idx, col_idx + 1, val, border_fmt)

        # Update start_row for next block
        start_row += len(matrix) + 3  # extra space between blocks

# Zip and download
zip_filename = 'CombinedTransportSummary.zip'
with zipfile.ZipFile(zip_filename, 'w') as zipf:
    zipf.write(output_filename)

files.download(zip_filename)

# ZONE NO. HOUSE ID COMBINATIONS

import pandas as pd
import zipfile
import os
from google.colab import files

# Install xlsxwriter if not already installed
!pip install xlsxwriter

# Upload Excel
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Read and clean data
# Set header=1 to use the second row as column names
df = pd.read_excel(filename, header=1)

# Clean column names by stripping whitespace
df.columns = df.columns.str.strip()

# Verify if "House ID" exists, and if not, try to find the correct column
if "House ID" not in df.columns:
    possible_house_id_columns = [col for col in df.columns if "house" in col.lower() or "id" in col.lower()]
    if possible_house_id_columns:
        house_id_col = possible_house_id_columns[0]
    else:
        raise KeyError("Column 'House ID' not found in the Excel file. Please check the column names.")
else:
    house_id_col = "House ID"

# Similarly, verify "Zone No."
if "Zone No." not in df.columns:
    possible_zone_no_columns = [col for col in df.columns if "zone" in col.lower() or "no" in col.lower()]
    if possible_zone_no_columns:
        zone_no_col = possible_zone_no_columns[0]
    else:
        raise KeyError("Column 'Zone No.' not found in the Excel file. Please check the column names.")
else:
    zone_no_col = "Zone No."

# Identify unique House ID and Zone Number combinations
# Remove rows where House ID or Zone Number is "NG" or NaN
df_filtered = df[(df[house_id_col].notna()) & (df[zone_no_col].notna()) & (df[house_id_col] != "NG") & (df[zone_no_col] != "NG")]
unique_combinations = df_filtered.groupby([house_id_col, zone_no_col]).size().reset_index()[[house_id_col, zone_no_col]]

# Create a directory to store the Excel files
output_dir = "house_zone_files"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Generate an Excel file for each House ID and Zone Number combination
excel_files = []
for _, row in unique_combinations.iterrows():
    house_id = row[house_id_col]
    zone_no = row[zone_no_col]

    # Filter data for the current House ID and Zone Number
    filtered_df = df[(df[house_id_col] == house_id) & (df[zone_no_col] == zone_no)]

    # Select the required columns as per the reference images
    output_df = filtered_df[["S.No", "नाम", "Phone No", "ढहरने का स्थान/ Address"]].copy()

    # Reset the S.No to start from 1 for each file
    output_df["S.No"] = range(1, len(output_df) + 1)

    # Create the Excel file name
    file_name = f"House_{house_id}_Zone_{zone_no}.xlsx"
    file_path = os.path.join(output_dir, file_name)

    # Write to Excel with formatting
    with pd.ExcelWriter(file_path, engine="xlsxwriter") as writer:
        output_df.to_excel(writer, sheet_name="Sheet1", index=False, startrow=4, header=["क्रम सं.", "नाम", "मोबाइल नंबर", "ठहरने का स्थान"])

        # Get the xlsxwriter workbook and worksheet objects
        workbook = writer.book
        worksheet = writer.sheets["Sheet1"]

        # Add the header similar to the image
        header_format = workbook.add_format({"bold": True, "align": "center"})
        worksheet.write(0, 0, f"House ID {house_id}", header_format)
        worksheet.write(1, 0, "जयह श्री राम", header_format)
        worksheet.write(2, 0, "श्रीमती रेखा मलिक", header_format)
        worksheet.write(2, 3, f"Zone No. {zone_no}", header_format)
        worksheet.write(3, 0, "367-आर, मॉडल टाउन, मोबाइल नंबर 90508-60167", header_format)

        # Adjust column widths
        for col_num, col_name in enumerate(["क्रम सं.", "नाम", "मोबाइल नंबर", "ठहरने का स्थान"]):
            max_len = max(
                output_df.iloc[:, col_num].astype(str).map(len).max(),
                len(col_name)
            )
            worksheet.set_column(col_num, col_num, max_len + 2)

    excel_files.append(file_path)

# Zip and download
zip_filename = "house_zone_excel_files.zip"
with zipfile.ZipFile(zip_filename, "w", zipfile.ZIP_DEFLATED) as zipf:
    for excel_file in excel_files:
        zipf.write(excel_file, os.path.join(output_dir, os.path.basename(excel_file)))

files.download(zip_filename)

# ADDRESS SUMMARY LIST (HOUSE ID/ZONE NO)

import pandas as pd
import zipfile
import os
!pip install XlsxWriter
from google.colab import files

# Step 1: Upload Excel file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Step 2: Read Excel data from second row (header=1)
df = pd.read_excel(filename, header=1)

# Step 3: Define required columns (as they appear in Excel)
required_columns = ['S.No', 'जाने आने का साधन', 'House ID', 'Zone No.', 'ढहरने का स्थान/ Address']

# Check if any required column is missing
missing_cols = [col for col in required_columns if col not in df.columns]

if missing_cols:
    print(f"❌ Missing columns: {missing_cols}")
    print("✅ Available columns are:")
    print(df.columns.tolist())
else:
    # ✅ Fix: Strip spaces when filtering and remove rows with null/empty Address
    df = df[df['जाने आने का साधन'].astype(str).str.strip() != 'NOT GOING'][required_columns]
    df = df[df['ढहरने का स्थान/ Address'].notna() & (df['ढहरने का स्थान/ Address'].astype(str).str.strip() != '')]

    # Step 4: Group by House ID and Zone No., get the address and count the number of persons
    grouped = df.groupby(['House ID', 'Zone No.']).agg(
        Address=('ढहरने का स्थान/ Address', 'first'),
        Number_of_Persons=('S.No', 'count')
    ).reset_index()

    # Sort by Zone No. in increasing order
    grouped['Zone No.'] = grouped['Zone No.'].astype(str)  # Convert to string to handle any non-numeric values
    grouped = grouped.sort_values(by='Zone No.', ascending=True)

    # Add Sr No. column and rename for clarity
    grouped.insert(0, 'Sr No.', range(1, len(grouped) + 1))
    grouped.columns = ['Sr No.', 'House ID', 'Zone No.', 'Address', 'Number of Persons']

    # Ensure correct data types
    grouped['House ID'] = grouped['House ID'].astype(str)
    grouped['Zone No.'] = grouped['Zone No.'].astype(str)
    grouped['Number of Persons'] = grouped['Number of Persons'].astype(int)

    # Step 5: Save to Excel
    output_filename = 'Address_Summary_Data.xlsx'
    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        grouped.to_excel(writer, sheet_name='Data', index=False, startrow=1)
        worksheet = writer.sheets['Data']
        worksheet.write('A1', 'Address Summary - House and Zone Wise')

        # Apply formatting
        center_format = writer.book.add_format({'align': 'center', 'valign': 'vcenter'})
        worksheet.set_column('A:A', 8, center_format)   # Sr No.
        worksheet.set_column('B:B', 10, center_format)  # House ID
        worksheet.set_column('C:C', 10, center_format)  # Zone No.
        worksheet.set_column('D:D', 50, center_format)  # Address
        worksheet.set_column('E:E', 15, center_format)  # Number of Persons

    # Step 6: Zip the file
    zip_filename = 'AddressSummary.zip'
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        zipf.write(output_filename)

    # Step 7: Download
    files.download(zip_filename)

# MASTER SUMMARY LIST

import pandas as pd
import zipfile
import os
!pip install XlsxWriter
from google.colab import files

# Step 1: Upload Excel file
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# Step 2: Read Excel data from second row (header=1)
df = pd.read_excel(filename, header=1)

# Step 3: Define required columns (as they appear in Excel)
required_columns = ['S.No', 'जाने आने का साधन', 'House ID', 'Zone No.']

# Check if any required column is missing
missing_cols = [col for col in required_columns if col not in df.columns]

if missing_cols:
    print(f"❌ Missing columns: {missing_cols}")
    print("✅ Available columns are:")
    print(df.columns.tolist())
else:
    # ✅ Fix: Strip spaces when filtering
    df = df[df['जाने आने का साधन'].astype(str).str.strip() != 'NOT GOING'][required_columns]

    # Ensure correct data types
    df['House ID'] = df['House ID'].astype(str)
    df['Zone No.'] = df['Zone No.'].astype(str)
    df['जाने आने का साधन'] = df['जाने आने का साधन'].astype(str).str.strip()

    # Step 4: Create House ID Wise Table
    # Create a pivot table directly
    house_pivot = pd.pivot_table(df,
                                 index=['Zone No.', 'जाने आने का साधन'],
                                 columns='House ID',
                                 values='S.No',
                                 aggfunc='count',
                                 fill_value=0)
    # Reset index to make Zone No. and Mode of Travel as columns
    house_pivot = house_pivot.reset_index()
    # Add Total column
    house_pivot['TOTAL'] = house_pivot.iloc[:, 2:].sum(axis=1)
    # Add Total row
    total_row = house_pivot.sum(numeric_only=True)
    total_row['Zone No.'] = 'TOTAL'
    total_row['जाने आने का साधन'] = ''
    house_pivot = pd.concat([house_pivot, total_row.to_frame().T], ignore_index=True)
    # Replace 0 with empty string for display
    house_pivot = house_pivot.replace(0, '')

    # Step 5: Create Zone Wise Table
    # Create a pivot table directly
    zone_pivot = pd.pivot_table(df,
                                index=['House ID', 'जाने आने का साधन'],
                                columns='Zone No.',
                                values='S.No',
                                aggfunc='count',
                                fill_value=0)
    # Reset index to make House ID and Mode of Travel as columns
    zone_pivot = zone_pivot.reset_index()
    # Add Total column
    zone_pivot['TOTAL'] = zone_pivot.iloc[:, 2:].sum(axis=1)
    # Add Total row
    total_row_zone = zone_pivot.sum(numeric_only=True)
    total_row_zone['House ID'] = 'TOTAL'
    total_row_zone['जाने आने का साधन'] = ''
    zone_pivot = pd.concat([zone_pivot, total_row_zone.to_frame().T], ignore_index=True)
    # Replace 0 with empty string for display
    zone_pivot = zone_pivot.replace(0, '')

    # Step 6: Save to Excel
    output_filename = 'Master_Summary_Data.xlsx'
    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        # Write House ID Wise Table
        house_pivot.to_excel(writer, sheet_name='Summary', index=False, startrow=1)
        worksheet = writer.sheets['Summary']
        worksheet.write('A1', 'MASTER SUMMARY - HOUSE ID WISE')

        # Write Zone Wise Table below House ID Wise Table
        start_row_zone = len(house_pivot) + 4
        zone_pivot.to_excel(writer, sheet_name='Summary', index=False, startrow=start_row_zone)
        worksheet.write(f'A{start_row_zone}', 'ZONE WISE')

        # Apply formatting
        center_format = writer.book.add_format({'align': 'center', 'valign': 'vcenter'})
        # Formatting for House ID Wise Table
        worksheet.set_column('A:A', 8, center_format)   # Zone No.
        worksheet.set_column('B:B', 15, center_format)  # Mode of Travel
        for col in range(2, len(house_pivot.columns)):
            worksheet.set_column(col, col, 8, center_format)  # House ID columns and TOTAL

        # Formatting for Zone Wise Table
        worksheet.set_column(f'A{start_row_zone + 1}:A{start_row_zone + len(zone_pivot) + 1}', 8, center_format)  # House ID
        worksheet.set_column(f'B{start_row_zone + 1}:B{start_row_zone + len(zone_pivot) + 1}', 15, center_format)  # Mode of Travel
        for col in range(2, len(zone_pivot.columns)):
            worksheet.set_column(col, col, 8, center_format, {'level': 1})  # Zone No. columns and TOTAL

    # Step 7: Zip the file
    zip_filename = 'MasterSummary.zip'
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        zipf.write(output_filename)

    # Step 8: Download
    files.download(zip_filename)